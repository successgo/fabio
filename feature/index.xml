<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Features on fabio - The Consul Load-Balancer</title>
    <link>https://fabiolb.net/feature/</link>
    <description>Recent content in Features on fabio - The Consul Load-Balancer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://fabiolb.net/feature/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Access Control</title>
      <link>https://fabiolb.net/feature/access-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/access-control/</guid>
      <description>&lt;p&gt;fabio supports basic ip centric access control per route.  You may
specify one of &lt;code&gt;allow&lt;/code&gt; or &lt;code&gt;deny&lt;/code&gt; options per route to control access.
Currently only source ip control is available.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Access Logging</title>
      <link>https://fabiolb.net/feature/access-logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/access-logging/</guid>
      <description>&lt;p&gt;Support for writing access logs for HTTP requests
in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Common_Log_Format&#34;&gt;Common Log Format&lt;/a&gt;
or the &lt;a href=&#34;https://httpd.apache.org/docs/1.3/logs.html#combined&#34;&gt;Combined Log Format&lt;/a&gt;
or a custom format to stdout.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Authorization</title>
      <link>https://fabiolb.net/feature/authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/authorization/</guid>
      <description>&lt;p&gt;fabio supports basic http authorization on a per-route basis.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Certificate Stores</title>
      <link>https://fabiolb.net/feature/certificate-stores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/certificate-stores/</guid>
      <description>&lt;p&gt;Support for dynamic certificate stores which allow you to store certificates in
a central place and update them at runtime or generate them on the fly without
restart. You can store certificates in files, directories, on HTTP
servers in &lt;a href=&#34;https://consul.io/&#34;&gt;Consul&lt;/a&gt; or in
&lt;a href=&#34;https://vaultproject.io/&#34;&gt;Vault&lt;/a&gt;.
You can use &lt;a href=&#34;https://vaultproject.io/&#34;&gt;Vault&lt;/a&gt; to generate certificates on the fly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker Support</title>
      <link>https://fabiolb.net/feature/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/docker/</guid>
      <description>To run fabio within Docker use the official Docker image fabiolb/fabio and mount your own config file to /etc/fabio/fabio.properties
docker run -d -p 9999:9999 -p 9998:9998 -v $PWD/fabio/fabio.properties:/etc/fabio/fabio.properties fabiolb/fabio  If you want to run the Docker image with one or more SSL certificates then you can store your configuration and certificates in /etc/fabio and mount the entire directory, e.g.
$ cat ~/fabio/fabio.properties proxy.addr=:443;/etc/fabio/ssl/mycert.pem;/etc/fabio/ssl/mykey.pem docker run -d -p 443:443 -p 9998:9998 -v $PWD/fabio:/etc/fabio fabiolb/fabio  The official Docker image contains the root CA certificates from a recent and updated Ubuntu 12.</description>
    </item>
    
    <item>
      <title>Dynamic Reloading</title>
      <link>https://fabiolb.net/feature/dynamic-reloading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/dynamic-reloading/</guid>
      <description>fabio builds the routing table from the Consul service registrations, health check status and the user provided route commands stored in the Consul KV store. This is the core feature of fabio - the reason it exists.
The cluster wide state is stored in the Consul Raft log which provides a consistent view of the available and healthy services in the cluster.
When the Raft log changes fabio is notified and downloads the list of healthy services and the user defined routes from the KV store and re-builds the routing table.</description>
    </item>
    
    <item>
      <title>Graceful Shutdown</title>
      <link>https://fabiolb.net/feature/graceful-shutdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/graceful-shutdown/</guid>
      <description>fabio supports a graceful shutdown timeout during which new requests will receive a 503 Service Unavailable response while the active requests can complete. See the proxy.shutdownwait option in the fabio.properties file.</description>
    </item>
    
    <item>
      <title>GRPC Proxy</title>
      <link>https://fabiolb.net/feature/grpc-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/grpc-proxy/</guid>
      <description>fabio can run a transparent GRPC proxy which dynamically forwards an incoming RPC on a given port to services which advertise rpc service or method. To use GRPC proxy support the service needs to advertise urlprefix-/my.service/Method proto=grpc in Consul. In addition, fabio needs to be configured with a grpc listener:
fabio -proxy.addr &#39;:1234;proto=grpc&#39; As per the HTTP/2 spec, the host header is not required, so host matching is not supported for GRPC proxying.</description>
    </item>
    
    <item>
      <title>HTTP Compression</title>
      <link>https://fabiolb.net/feature/http-compression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/http-compression/</guid>
      <description>Enable dynamic compression of responses when the client sets the Accept-Encoding: gzip header and the name of the requested file matches a regular expression.
To configure which files should be compressed on the fly set configure a regular expression in the proxy.gzip.contenttype property
# proxy.gzip.contenttype configures which responses should be compressed. # # By default, responses sent to the client are not compressed even if the # client accepts compressed responses by setting the &#39;Accept-Encoding: gzip&#39; # header.</description>
    </item>
    
    <item>
      <title>HTTP Header Support</title>
      <link>https://fabiolb.net/feature/http-headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/http-headers/</guid>
      <description>In addition, to injecting the Forwarded and X-Real-Ip headers the X-Forwarded-For, X-Forwarded-Port and X-Forwarded-Proto headers are added to HTTP(S) and Websocket requests. Custom headers for the ip address and protocol can be configured with the proxy.header.clientip, proxy.header.tls and proxy.header.tls.value options.
Since version 1.5.3 fabio also sets the X-Forwarded-Host header.</description>
    </item>
    
    <item>
      <title>HTTP Path Stripping</title>
      <link>https://fabiolb.net/feature/http-path-stripping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/http-path-stripping/</guid>
      <description>fabio supports stripping a path from the incoming request. If you want to forward http://host/foo/bar as http://host/bar you can add a strip=/foo option to the route options as urlprefix-/foo/bar strip=/foo.</description>
    </item>
    
    <item>
      <title>HTTP Redirects</title>
      <link>https://fabiolb.net/feature/http-redirects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/http-redirects/</guid>
      <description>To redirect an HTTP request to another URL you can use the redirect=&amp;lt;code&amp;gt; option. The code is the HTTP status code used for the redirect response and must be between 300-399 for the route to be valid.
# redirect /path to https://www.google.com/ route add svc /path https://www.google.com/ opts &amp;quot;redirect=301&amp;quot;  To use the redirect with the urlprefix- tags you need to specify the target URL in after the code since the target of the request is usually the address of the service that registers the tag.</description>
    </item>
    
    <item>
      <title>HTTPS TCP-SNI Proxy</title>
      <link>https://fabiolb.net/feature/https-tcp-sni-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/https-tcp-sni-proxy/</guid>
      <description>fabio can run a TCP+SNI routing proxy on a listener, and have fallback to https functionality. This is effectively an amalgam of the TCP-SNI Proxy and the HTTPS functionality.
To enable this feature configure a listener as follows:
fabio -proxy.addr=&#39;:443;proto=https+tcp+sni;cs=somecertstore&#39; For host matches that are proto=tcp or have a scheme of tcp://, this will proxy TCP using SNI.
You would register your service in Consul with a urlprefix- tag that matches the host from the SNI extension for any services that should be proxied TCP (TLS terminated by upstream).</description>
    </item>
    
    <item>
      <title>HTTPS Upstream</title>
      <link>https://fabiolb.net/feature/https-upstream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/https-upstream/</guid>
      <description>To support HTTPS upstream servers add the proto=https option to the urlprefix- tag. The current implementation requires that upstream certificates need to be in the system root CA list. To disable certificate validation for a target set the tlsskipverify=true option.
urlprefix-/foo proto=https urlprefix-/foo proto=https tlsskipverify=true </description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://fabiolb.net/feature/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/metrics/</guid>
      <description>fabio collects metrics per route and service instance as well as running totals to avoid computing large amounts of metrics. The metrics can be send to Circonus, Graphite, StatsD, DataDog (via statsd) or stdout. See the metrics.* options in the fabio.properties file.
Fabio reports the following metrics:
   Name Type Description     {route}.rx timer Number of bytes received by fabio for TCP target   {route}.</description>
    </item>
    
    <item>
      <title>PROXY Protocol Support</title>
      <link>https://fabiolb.net/feature/proxy-protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/proxy-protocol/</guid>
      <description>fabio transparently supports the HA Proxy PROXY protocol version 1 which is used by HA Proxy, Amazon ELB and others to transmit the remote address and port of the client without using headers.
You may control the behavior of PROXY protocol support with the following options on the listener:
  pxyproto: When set to &amp;lsquo;true&amp;rsquo; the listener will respect upstream v1 PROXY protocol headers. NOTE: PROXY protocol was on by default from 1.</description>
    </item>
    
    <item>
      <title>Server Sent Events (SSE)</title>
      <link>https://fabiolb.net/feature/sse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/sse/</guid>
      <description>fabio detects SSE connections if the Accept header is set to text/event-stream and enables automatic flushing of the response buffer to forward data to the client. The default is set to 1s and can be configured with the proxy.flushinterval parameter.</description>
    </item>
    
    <item>
      <title>TCP Dynamic Proxy</title>
      <link>https://fabiolb.net/feature/tcp-dynamic-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/tcp-dynamic-proxy/</guid>
      <description>The TCP dynamic proxy is similar to the TCP Proxy, but the listener is started from the Consul urlprefix tag. Also, the service is defined with IP and port, so that multiple services can be defined on the load balancer using the same TCP port. Connections are forwarded to services based on the combination of ip:port
To use TCP Dynamic proxy support the service needs to advertise urlprefix-127.0.0.1:1234 proto=tcp in Consul.</description>
    </item>
    
    <item>
      <title>TCP Proxy</title>
      <link>https://fabiolb.net/feature/tcp-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/tcp-proxy/</guid>
      <description>fabio can run a transparent TCP proxy which dynamically forwards an incoming connection on a given port to services which advertise that port. To use TCP proxy support the service needs to advertise urlprefix-:1234 proto=tcp in Consul. In addition, fabio needs to be configured to listen on that port:
fabio -proxy.addr &#39;:1234;proto=tcp&#39; TCP proxy support can be combined with Certificate Stores to provide TLS termination on fabio.
fabio -proxy.cs &#39;cs=ssl;type=path;path=/etc/ssl&#39; -proxy.</description>
    </item>
    
    <item>
      <title>TCP-SNI Proxy</title>
      <link>https://fabiolb.net/feature/tcp-sni-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/tcp-sni-proxy/</guid>
      <description>fabio can run a transparent TCP proxy with SNI support which can forward any TLS connection without re-encrypting the traffic. fabio captures the ClientHello packet which is the first packet of the TLS handshake and extracts the server name from the SNI extension and uses it for finding the upstream server to forward the connection to. It then replays the ClientHello packet and then transparently forwards all traffic between client and server as a byte stream.</description>
    </item>
    
    <item>
      <title>Traffic Shaping</title>
      <link>https://fabiolb.net/feature/traffic-shaping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/traffic-shaping/</guid>
      <description>fabio allows to control the amount of traffic a set of service instances will receive. You can use this feature to direct a fixed percentage of traffic to a newer version of an existing service for testing (&amp;ldquo;Canary testing&amp;rdquo;). See Manual Overrides for a complete description of the route weight command.
The following command will allocate 5% of traffic to www.kjca.dev/auth/ to all instances of service-b which match tags version-15 and dc-fra.</description>
    </item>
    
    <item>
      <title>Vault Support</title>
      <link>https://fabiolb.net/feature/vault/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/vault/</guid>
      <description>fabio can use Vault as a secure key/value store to store certificates.
As of 1.5.3 fabio can use the PKI support of Vault to generate TLS certificates on demand. See fabio.properties for details.</description>
    </item>
    
    <item>
      <title>Web UI</title>
      <link>https://fabiolb.net/feature/web-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/web-ui/</guid>
      <description>fabio supports a Web UI to examine the current routing table and manage the manual overrides. By default it listens on http://0.0.0.0:9998/ which can be changed with the ui.addr option. The ui.title and ui.color options allow customization of the title and the color of the header bar.</description>
    </item>
    
    <item>
      <title>Websockets</title>
      <link>https://fabiolb.net/feature/websockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fabiolb.net/feature/websockets/</guid>
      <description>fabio transparently supports Websocket connections by detecting the Upgrade: websocket header in the incoming HTTP(S) request.
Websocket support has been implemented with the websocket library from golang.org/x/net/websocket.
You can test the websocket support with the demo/wsclient and demo/server which implements a simple echo server.
./server -addr 127.0.0.1:5000 -name ws-a -prefix /echo -proto ws ./wsclient -url ws://127.0.0.1:9999/echo  You can also run multiple web socket servers on different ports but the same endpoint.</description>
    </item>
    
  </channel>
</rss>